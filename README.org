* blorg

  Generate Static HTML websites from Org-Mode files.

  The most important thing to mastering blorg is to understand that it
  is not an interactive tool. It's a single function API that takes
  Org files as an input and generate HTML files as an output.  Behold
  the ~blorg-gen~ function.

** ~blorg-gen~ usage

   You need to define an input pattern to filter out which Org-Mode
   files are part of your input, choose a template, then specify an
   output and ~blorg-gen~ will make the HTML content and the metadata
   of the Org-Mode file available to the template and finally generate
   an HTML file and save it in a file:

   #+begin_src emacs-lisp
   (require 'blorg)
   (blorg-gen
    :input-pattern "posts/.*\\.org$"
    :template "post.html"
    :output "output/{{ slug }}/index.html")
   #+end_src

   The three main parameters that must be passed to ~blorg-gen~ are:

   1. ~input-pattern~: That's a regular expression that will be used
      to match which files are included in the input list.
   2. ~template~: Which HTML file will be picked as the template.
   3. ~output~: Little template expression that allows customizing the
      output file name. It takes a template expression and has all the
      ~post~ variables available.  If your input expression matches
      more than one file, this option allows you to name the diffent
      output files based on data from the input file.  Also, if sub
      directories that appear in the output path don't exist in the
      file system, they will be created automatically.

   One common thing between the three variables above is that they're
   all relative to the ~:base-dir~.  Which also happens to be a
   parameter to ~blorg-gen~ and defaults to [[https://www.gnu.org/software/emacs/manual/html_node/emacs/File-Names.html#index-default-directory_002c-of-a-buffer-1187][~default-directory~]].

** Proposed file structure

   If you're looking into creating a new blog or porting an existing
   body of Org-Mode posts you can have a structure similar to this:

   #+begin_src sh
   $ tree your-new-blog
   your-new-blog
   ├─ publish.el
   ├─ src/
   │  └─ posts/
   │     └─ welcome.org # (and other .org files)
   └─ static/
       ├─ css/
       ├─ img/
       └─ js/
   #+end_src

   The script ~./publish.el~ would have the call to ~blog-gen~ to
   export the HTML to the configured output directory.  There is a
   good example of a ~publish.el~ file that won't mess with your
   default Emacs configuration. In fact, it tries to stay away from it
   and run without any assumptions about the setup.

** HTML Generation

   We're using the powerful ~ox~ and ~ox-html~ native capabilities of
   ~org-mode~.  The ~org-html-template~ function is overwritten with
   an advice and a [[github.com/clarete/templatel][template system]] is used instead of simply
   concatenating a preamble and a post amble strings.  There isn't
   currently a good way of configuring how that HTML is
   generated. Ideas are welcome.
